<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE scripts PUBLIC "-//UniTime//DTD University Course Timetabling/EN" "http://www.unitime.org/interface/Script.dtd">

<!--
 * Licensed to The Apereo Foundation under one or more contributor license
 * agreements. See the NOTICE file distributed with this work for
 * additional information regarding copyright ownership.
 *
 * The Apereo Foundation licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 -->

<scripts created="February 25, 2016">
<script name="DegreeWorks: Import Templates as Curricula" permission="Script Edit" engine="python" created="Thu Feb 25 07:30:36 EST 2016">
  <parameter name="file" label="Input File" type="file"/>
  <parameter name="studentType" label="Requested Enrollment" type="enum(LastLike,Projected,Enrolled,None)" default="Projected"/>
  <parameter name="classifications" label="Classifications" type="text"/>
  <body><![CDATA[import re
import csv
from org.unitime.timetable.model import Curriculum, AcademicArea, PosMajor, CurriculumClassification, CurriculumCourse, CurriculumCourseGroup
from java.util import HashSet

class Placeholder:
    def __init__(self, code, name):
        self.code = code
        self.name = name

    def __str__(self):
        return self.code

class Course:
    def __init__(self, subject, courseNbr):
        self.subject = subject
        self.courseNbr = courseNbr
        courses = hibSession.createQuery(
            "from CourseOffering co where co.subjectArea.session.uniqueId = :sessionId and co.subjectArea.subjectAreaAbbreviation = :subject and co.courseNbr like :courseNbr || '%' order by co.courseNbr"
            ).setParameter("sessionId", session.getUniqueId()).setParameter("subject", self.subject).setParameter("courseNbr", self.courseNbr).list()
        offered = []
        for co in courses:
            if not co.getInstructionalOffering().getNotOffered(): offered.append(co)
        if len(offered) > 0: courses = offered
        if len(courses) > 1:
            honor = None
            y = None
            x = None
            match = None
            for co in courses:
                if co.getCourseNbr() == '%sH' % self.courseNbr: honor = co
                if co.getCourseNbr() == '%sY' % self.courseNbr: y = co
                if co.getCourseNbr() == '%sX' % self.courseNbr: x = co
                if co.getCourseNbr() == self.courseNbr: match = co
            if match: courses = [match]
            if honor and len(courses) > 1: courses.remove(honor)
            if not y and x and len(courses) > 1: courses.remove(x)
        self.courses = courses
        
    def __str__(self):
        return '%s %s' % (self.subject, self.courseNbr)
    
    def __eq__(self, other):
        return self.subject == other.subject and self.courseNbr == other.courseNbr
    
    def __ne__(self, other):
        return not self.__eq__(other)
    
    def __hash__(self):
        return hash((self.subject, self.courseNbr))
    
    def enumerate(self):
        return self.courses
    
    def exists(self):
        return len(self.courses) > 0
    
    def create(self, template, classification, share, parent, group):
        ret = []
        g = None
        if len(self.courses) > 1:
            log.debug('%s %s has multiple choices' % (self.subject, self.courseNbr))
            if parent.type == "OPT":
                share = share / len(self.courses)
            else:
                g = CurriculumCourseGroup()
                parent.mIdx = parent.mIdx + 1
                g.setName('%s %d' % (parent.name, parent.mIdx)) 
                g.setCurriculum(classification.getCurriculum())
                g.setType(0)
                template.groups.append(g)
                share = share / len(self.courses)
        for co in self.courses:
            cc = CurriculumCourse()
            cc.setClassification(classification)
            classification.getCourses().add(cc)
            cc.setCourse(co)
            cc.setPercShare(share)
            cc.setOrd(classification.getCourses().size() - 1)
            cc.setGroups(HashSet())
            if group:
                cc.getGroups().add(group)
            if g:
                cc.getGroups().add(g)
                group = None
            ret.append(cc)
        return ret
    
class Group:
    def __init__(self, id, name, type):
        self.id = id
        self.name = name
        self.type = type
        self.parent = None
        self.credits = 0
        self.mIdx = 0
        self.courses = []
        self.placeholders = []
        
    def addCourse(self, course):
        if course not in self.courses:
            self.courses.append(course)
        
    def getCourses(self):
        return self.courses
    
    def addPlaceholder(self, placeholder):
        self.placeholders.append(placeholder)
        
    def getPlaceholders(self):
        return self.placeholders
    
    def isEmpty(self):
        return len(self.courses) == 0

    def __str__(self):
        if self.courses:
            if self.placeholders:
                return '%s/(%s, %s)' % (self.name, ', '.join([str(c) for c in self.courses]), ', '.join([str(p) for p in self.placeholders]))
            else:
                return '%s/(%s)' % (self.name, ', '.join([str(c) for c in self.courses]))
        elif self.placeholders:
            return '%s/(%s)' % (self.name, ', '.join([str(p) for p in self.placeholders]))
        else:
            return '%s' % self.name

class Classification:
    def __init__(self, id, code):
        self.id = id
        self.code = code
        self.groups = []
        self.students = 0
    
    def addGroup(self, group):
        self.groups.append(group)
        
    def getGroups(self):
        return self.groups
    
    def isEmpty(self):
        for group in self.groups:
            if not group.isEmpty(): return False
        return True
    
    def __str__(self):
        return '%s: %s' % (self.code, '; '.join([str(g) for g in self.groups]))
    
    def countEnrolledStudents(self, template):
        return hibSession.createQuery(
            'select count(distinct s) from StudentClassEnrollment e inner join e.student s inner join s.academicAreaClassifications aac inner join s.posMajors m where s.session.uniqueId = :sessionId and aac.academicArea.academicAreaAbbreviation = :area and aac.academicClassification.code = :classfication and m.code = :major'
            ).setParameter('sessionId', session.getUniqueId()).setParameter('area', template.area).setParameter('major', template.major).setParameter('classfication', self.code).uniqueResult()
        
    def countLastLikeStudents(self, template):
        return hibSession.createQuery(
            'select count(distinct s) from LastLikeCourseDemand e inner join e.student s inner join s.academicAreaClassifications aac inner join s.posMajors m where e.subjectArea.session.uniqueId = :sessionId and aac.academicArea.academicAreaAbbreviation = :area and aac.academicClassification.code = :classfication and m.code = :major'
            ).setParameter('sessionId', session.getUniqueId()).setParameter('area', template.area).setParameter('major', template.major).setParameter('classfication', self.code).uniqueResult()
            
    def countProjectedStudents(self, template):
        projection = 1.0
        rule = hibSession.createQuery(
            'from CurriculumProjectionRule r where r.academicArea.session.uniqueId = :sessionId and r.academicArea.academicAreaAbbreviation = :area and r.academicClassification.code = :classfication and r.major.code = :major'
            ).setParameter('sessionId', session.getUniqueId()).setParameter('area', template.area).setParameter('major', template.major).setParameter('classfication', self.code).uniqueResult()
        if rule:
            projection = rule.getProjection()
        else:
            ruleNoMajor = hibSession.createQuery(
                'from CurriculumProjectionRule r where r.academicArea.session.uniqueId = :sessionId and r.academicArea.academicAreaAbbreviation = :area and r.academicClassification.code = :classfication and r.major is null'
                ).setParameter('sessionId', session.getUniqueId()).setParameter('area', template.area).setParameter('classfication', self.code).uniqueResult()
            if ruleNoMajor: projection = ruleNoMajor.getProjection()
        nrStudents = hibSession.createQuery(
            'select count(distinct s) from LastLikeCourseDemand e inner join e.student s inner join s.academicAreaClassifications aac inner join s.posMajors m where e.subjectArea.session.uniqueId = :sessionId and aac.academicArea.academicAreaAbbreviation = :area and aac.academicClassification.code = :classfication and m.code = :major'
            ).setParameter('sessionId', session.getUniqueId()).setParameter('area', template.area).setParameter('major', template.major).setParameter('classfication', self.code).uniqueResult()
        return int(round(projection * nrStudents))
    
    def generateClassification(self, template, curriculum):
        acadClasf = hibSession.createQuery(
            'from AcademicClassification where session.uniqueId = :sessionId and code = :code'
            ).setParameter('sessionId', session.getUniqueId()).setParameter('code', self.code).uniqueResult()
        classification = CurriculumClassification()
        classification.setCurriculum(curriculum)
        curriculum.getClassifications().add(classification)
        classification.setName(self.code)
        classification.setAcademicClassification(acadClasf)
        classification.setCourses(HashSet())
        
        classification.setNrStudents(self.students)
        classification.setOrd(curriculum.getClassifications().size() - 1)
        
        for group in self.groups:
            if group.parent: continue
            
            size = len(group.courses) 
            for child in self.groups:
                if group.id == child.parent and not child.isEmpty():
                    size = size + 1
                    
            if size == 0: continue
            
            g = None
            if not group.isEmpty():
                g = CurriculumCourseGroup()
                g.setName(group.name)
                g.setCurriculum(curriculum)
                g.setType(1)
                if "OPT" == group.type: g.setType(0)
                template.groups.append(g)
            
            share = 1.0
            if "OPT" == group.type:
                share = 1.0 / size
            
            for course in group.courses:
                course.create(template, classification, share, group, g)

            first = True
            for child in self.groups:
                if not group.id == child.parent or child.isEmpty(): continue
                h = CurriculumCourseGroup()
                h.setName(child.name)
                h.setCurriculum(curriculum)
                h.setType(1)
                template.groups.append(h)
                
                for course in child.courses:
                    created = course.create(template, classification, share, child, h)
                    if first and g:
                        created[0].getGroups().add(g)
                        first = False
                
        
        return classification
    
class Template:
    def __init__(self, id, name):
        self.id = id
        self.classifications = []
        self.area = None
        self.major = None
        self.name = name
        if len(name) > 60:
            self.name = name[0:60] 
        self.tags = {}
        self.groups = []
        self.ext = []
        
    def extendMajor(self, code):
        if code and code not in self.ext:
            self.ext.append(code)
            self.major = '%s-%s' % (self.tags['major'], ''.join(self.ext))
            log.info('Changing %s/%s to %s/%s (%s)' % (self.area, self.tags["major"], self.area, self.major, self.name))
        
    def sortKey(self):
        return '%s/%s %s' % (self.area, self.major, self.name)
    
    def getConcentration(self):
        if "conc" in self.tags:
            return self.tags["conc"]
        else:
            return None
    
    def sameConcentration(self, other):
        c1 = self.getConcentration()
        if c1:
            return c1 == other.getConcentration()
        elif other.getConcentration():
            return False
        else:
            return True
        
    def getDegree(self):
        if "degree" in self.tags and self.tags["degree"] != "BS":
            return self.tags["degree"]
        else:
            return None
    
    def sameDegree(self, other):
        c1 = self.getDegree()
        if c1:
            return c1 == other.getDegree()
        elif other.getDegree():
            return False
        else:
            return True    
    
    def addClassification(self, classification):
        self.classifications.append(classification)
    
    def getClassifications(self):
        return self.classifications;
    
    def getClassification(self, id):
        for classification in self.classifications:
            if id == classification.id: return classification
        return None

    def getGroup(self, id):
        for classification in self.classifications:
            for group in classification.groups:
                if id == group.id: return group
        return None
    
    def getGroupClassification(self, id):
        for classification in self.classifications:
            for group in classification.groups:
                if id == group.id: return classification
        return None
    
    def __str__(self):
        lines = []
        for c in self.classifications:
            if not c.isEmpty(): lines.append('<br>&nbsp;&nbsp;&nbsp;&nbsp;%s' % str(c))
        return '%s/%s %s %s' % (self.area, self.major, self.name, ''.join(lines))
    
    def isEmpty(self):
        for classification in self.classifications:
            if not classification.isEmpty(): return False
        return True
    
    def size(self):
        ret = 0
        for classification in self.classifications:
            for group in classification.groups:
                ret = ret + len(group.courses)
        return ret
    
    def isTSW(self):
        return re.search("[tT]ech [sS]tate ?[wW]ide", self.name)
    
    def is3Y(self):
        return re.search("\(3-Year\)", self.name)
    
    def isBetter(self, other):
        if self.isTSW():
            if not other.isTSW(): return False
        elif other.isTSW(): return True
        
        if self.is3Y():
            if not other.is3Y(): return False
        elif other.is3Y(): return True
        
        return self.size() > other.size()
    
    def guessDepartment(self):
        departments = {}
        for classification in self.classifications:
            for group in classification.groups:
                for course in group.courses:
                    for co in course.enumerate():
                        d = co.getSubjectArea().getDepartment()
                        if d in departments:
                            departments[d] = departments[d] + 1
                        else:
                            departments[d] = 1
        department = None
        max = 0
        for d in departments.keys():
            if not department or max < departments[d]:
                department = d
                max = departments[d]
        return department
    
    def getCurriculum(self, matchName):
        if matchName:
            return hibSession.createQuery(
                'select distinct c from Curriculum c inner join c.majors m where c.academicArea.session.uniqueId = :sessionId and c.academicArea.academicAreaAbbreviation = :area and m.code = :major and c.name = :name'
                ).setParameter('sessionId', session.getUniqueId()).setParameter('area', self.area).setParameter('major', self.major).setParameter('name', self.name).uniqueResult()
        else:
            return hibSession.createQuery(
                'select distinct c from Curriculum c inner join c.majors m where c.academicArea.session.uniqueId = :sessionId and c.academicArea.academicAreaAbbreviation = :area and m.code = :major'
                ).setParameter('sessionId', session.getUniqueId()).setParameter('area', self.area).setParameter('major', self.major).uniqueResult()
    
    def generateCurriculum(self, curriculum):
        if not curriculum:
            area = hibSession.createQuery(
                "from AcademicArea where session.uniqueId = :sessionId and academicAreaAbbreviation = :area"
                ).setParameter('sessionId', session.getUniqueId()).setParameter('area', self.area).uniqueResult()
            if not area:
                area = AcademicArea()
                area.setAcademicAreaAbbreviation(self.area)
                area.setTitle(self.area)
                area.setPosMajors(HashSet())
                area.setSession(session)
                log.warn('Academic area %s did not exist' % self.area)
            major = hibSession.createQuery(
                "select m from PosMajor m inner join m.academicAreas a where a.session.uniqueId = :sessionId and code = :major and a.academicAreaAbbreviation = :area"
                ).setParameter('sessionId', session.getUniqueId()).setParameter('area', self.area).setParameter('major', self.major).uniqueResult()
            if not major:
                major = PosMajor()
                major.setAcademicAreas(HashSet())
                major.setCode(self.major)
                major.setName(self.major)
                major.setSession(session)
                major.getAcademicAreas().add(area)
                area.getPosMajors().add(major)
                log.warn('Major %s/%s did not exist' % (self.area, self.major))
            hibSession.saveOrUpdate(area)
            hibSession.saveOrUpdate(major)
            curriculum = Curriculum()
            curriculum.setAbbv('%s/%s' % (self.area, self.major))
            curriculum.setName(self.name)
            curriculum.setAcademicArea(area)
            curriculum.setMajors(HashSet())
            curriculum.getMajors().add(major)
            curriculum.setClassifications(HashSet())
            curriculum.setDepartment(self.guessDepartment())
            curriculum.setMultipleMajors(False)
        # else:
        #    for classification in curriculum.getClassifications():
        #        hibSession.delete(classification)
        #    curriculum.getClassifications().clear()
        return curriculum

def getBannerTerm():
    if session.getAcademicTerm().lower().startswith("spr"): return '%s20' % session.getAcademicYear()
    if session.getAcademicTerm().lower().startswith("sum"): return '%s30' % session.getAcademicYear()
    if session.getAcademicTerm().lower().startswith("fal"): return '%02d10' % (int(session.getAcademicYear()) + 1)
    return '%s%s' % (session.getAcademicYear(), session.getAcademicTerm().lower())

def countEnrolledStudents(area, major):
    return hibSession.createQuery(
        'select count(distinct s) from StudentClassEnrollment e inner join e.student s inner join s.academicAreaClassifications aac inner join s.posMajors m where s.session.uniqueId = :sessionId and aac.academicArea.academicAreaAbbreviation = :area and m.code = :major'
    ).setParameter('sessionId', session.getUniqueId()).setParameter('area', area).setParameter('major', major).uniqueResult()

def countLastLikeStudents(area, major):
    return hibSession.createQuery(
        'select count(distinct s) from LastLikeCourseDemand e inner join e.student s inner join s.academicAreaClassifications aac inner join s.posMajors m where e.subjectArea.session.uniqueId = :sessionId and aac.academicArea.academicAreaAbbreviation = :area and m.code = :major'
    ).setParameter('sessionId', session.getUniqueId()).setParameter('area', area).setParameter('major', major).uniqueResult()

log.info('Current Term: %s' % getBannerTerm())        
termPattern = re.compile("%s Term ([1-9]+)" % session.getAcademicTerm())

if not file:
    log.error("There was no file provided.")

template = None
templates = []
warn = {}
tags = {}
for line in file.getString('utf-8').split('\n'):
    data = line.split('!')
    recordType = data[0].split(':')[0]
    if "MST" == recordType:
        template = Template(data[0].split(':')[1], data[1])
        templates.append(template)
    elif "TERM" == recordType:
        m = termPattern.match(data[3])
        if m:
            code = 2 * (int(m.group(1)) - 1) + 1
            if session.getAcademicTerm().lower().startswith("spr"): code = code + 1
            c = Classification(data[1], '%02d' % code)
            template.addClassification(c)
    elif "TAG" == recordType:
        code = data[1]
        value = data[2]
        tags[code.lower()] = True
        if "COLLEGE" == code:
            template.area = value
        elif "MAJOR" == code:
            template.major = value
        template.tags[code.lower()] = value
    elif "GROUPMST" == recordType:
        c = template.getClassification(data[3])
        if not c: continue
        g = Group(data[1], "R%s" % c.code, "REQ")
        c.addGroup(g)
    elif "CHOICEGROUP" == recordType:
        c = template.getClassification(data[3])
        if not c: continue
        g = Group(data[1], "O%s-%s" % (c.code, data[5]), "OPT")
        if data[10]: g.credits = int(data[10])
        c.addGroup(g)
    elif "CLASSGROUP" == recordType:
        g = template.getGroup(data[3])
        if not g: continue
        c = template.getGroupClassification(data[3])
        x = Group(data[1], "X%s-%s" % (c.code, data[5]), "REQ")
        if data[10]: x.credits = int(data[10])
        x.parent = g.id
        c.addGroup(x)
    elif "CLASS" == recordType:
        g = template.getGroup(data[2])
        if not g: continue
        c = Course(data[5], data[6])
        if c.exists(): g.addCourse(c)
        else:
            if c not in warn: log.warn('Course %s does not exist.' % str(c))
            warn[c] = True            
    elif "CLASSGRP" == recordType:
        g = template.getGroup(data[2])
        if not g: continue
        c = Course(data[5], data[6])
        if c.exists(): g.addCourse(c)
        else:
            if c not in warn: log.warn('Course %s does not exist.' % str(c))
            warn[c] = True            
    elif "PLACEHOLDER" == recordType:
        g = template.getGroup(data[2])
        if not g: continue
        g.addPlaceholder(Placeholder(data[3], data[4]))

div = {}
for template in templates:
    for clasf in template.classifications:
        if clasf.isEmpty(): continue
        id = '%s/%s %s' % (template.area, template.major, clasf.code)
        if id in div:
            div[id] = div[id] + 1
        else:
            div[id] = 1

for template in templates:
    for clasf in template.classifications:
        id = '%s/%s %s' % (template.area, template.major, clasf.code)
        studentCount = 0
        if studentType == "Enrolled":
            studentCount = clasf.countEnrolledStudents(template)
        elif studentType == "LastLike":
            studentCount = clasf.countLastLikeStudents(template)
        elif studentType == "Projected":
            studentCount = clasf.countProjectedStudents(template)
        if id in div:
            clasf.students = studentCount / div[id]
        else:
            clasf.students = studentCount

for template in templates:
    for other in templates:
        if template.id < other.id and template.area == other.area and template.tags['major'] == other.tags['major']:
            if not template.sameDegree(other):
                template.extendMajor(template.getDegree())
                other.extendMajor(other.getDegree())
            if not template.sameConcentration(other):
                template.extendMajor(template.getConcentration())
                other.extendMajor(other.getConcentration())
    if template.is3Y():
        template.extendMajor('3Y')
    if template.isTSW():
        template.extendMajor('W')
    
out = open(log.createOutput('curricula','csv').getAbsolutePath(), 'w')
writer = csv.writer(out, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
header = ['code', 'name']
header.extend(sorted(tags.keys()))
header.append('imported')
writer.writerow(header)
id2temp = {}
for template in sorted(templates, key=lambda x: x.sortKey(), reverse=False):
    line = ['%s/%s' % (template.area, template.major), template.name]
    for tag in sorted(tags.keys()):
        if tag in template.tags:
            line.append(template.tags[tag])
        else:
            line.append('')
    id = '%s/%s' % (template.area, template.major)
    if not id in id2temp or template.isBetter(id2temp[id]):
        id2temp[id] = template
        line.append('Yes')
    else:
        line.append('No')
    writer.writerow(line)
out.close()
        
for template in sorted(id2temp.values(), key=lambda x: x.sortKey()):
    if template.isEmpty():
        log.info('Skipping %s' % str(template))
        continue
    curriculum = template.getCurriculum(False)
    skip = {}
    if curriculum:
        for classification in curriculum.getClassifications():
            skip[classification.getAcademicClassification().getCode()] = True
    if classifications:
        for clasf in template.classifications:
            if not clasf.isEmpty() and clasf.code not in classifications.split(","):
                skip[clasf.code] = True
    #    log.info('Skipping %s' % str(template))
    #    continue
    log.info('Importing %s' % str(template))
    curriculum = template.generateCurriculum(curriculum)
    for clasf in template.classifications:
        if not clasf.isEmpty() and not clasf.code in skip:
            classification = clasf.generateClassification(template, curriculum)
        else:
            log.info('Skipping %s' % str(clasf))
    hibSession.saveOrUpdate(curriculum)
    for g in template.groups:
        hibSession.saveOrUpdate(g)]]></body>
</script>
</scripts>