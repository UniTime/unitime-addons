<?xml version="1.0" encoding="UTF-8"?>

<!-- 
 * Licensed to The Apereo Foundation under one or more contributor license
 * agreements. See the NOTICE file distributed with this work for
 * additional information regarding copyright ownership.
 *
 * The Apereo Foundation licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 -->
<dbupdate>
	<dialect type="mysql">org.hibernate.dialect.MySQLDialect</dialect>
	<dialect type="mysql">org.hibernate.dialect.MySQLInnoDBDialect</dialect>
	<dialect type="mysql">org.hibernate.dialect.MySQL5InnoDBDialect</dialect>
	<dialect type="mysql">org.hibernate.dialect.MySQL5Dialect</dialect>
	<dialect type="plsql">org.hibernate.dialect.OracleDialect</dialect>
	<dialect type="plsql">org.hibernate.dialect.Oracle8iDialect</dialect>
	<dialect type="plsql">org.hibernate.dialect.Oracle9Dialect</dialect>
	<dialect type="plsql">org.hibernate.dialect.Oracle9iDialect</dialect>
	<dialect type="plsql">org.hibernate.dialect.Oracle10gDialect</dialect>
 
 	<update version="2" date="21-Sep-2010" comment="Banner Response Indexes">
		<plsql>
			create index %SCHEMA%.idx_response_term_code on %SCHEMA%.banner_response(term_code)
		</plsql>
		<mysql>
			create index idx_response_term_code on %SCHEMA%.banner_response(term_code)
		</mysql>
		<plsql>
			create index %SCHEMA%.idx_response_crn on %SCHEMA%.banner_response(crn)
		</plsql>
		<mysql>
			create index idx_response_crn on %SCHEMA%.banner_response(crn)
		</mysql>
		<plsql>
			create index %SCHEMA%.idx_response_xlst_group on %SCHEMA%.banner_response(xlst_group)
		</plsql>
		<mysql>
			create index idx_response_xlst_group on %SCHEMA%.banner_response(xlst_group)
		</mysql>
	</update>
 	<update version="3" date="05-Nov-2010" comment="Banner CRN Lookup Indexes">
		<plsql>
			create index %SCHEMA%.idx_banner_section_sess_crn on %SCHEMA%.banner_section(session_id, crn)
		</plsql>
		<mysql>
			create index idx_banner_section_sess_crn on %SCHEMA%.banner_section(session_id, crn)
		</mysql>
		<plsql>
			create index %SCHEMA%.idx_banner_session_term_code on %SCHEMA%.banner_session(banner_term_code)
		</plsql>
		<mysql>
			create index idx_banner_session_term_code on %SCHEMA%.banner_session(banner_term_code)
		</mysql>
	</update>
 	<update version="4" date="06-Feb-2013" comment="Banner Campus Override Support">
		<plsql>
			create table %SCHEMA%.banner_campus_override (
				uniqueid number(20,0) constraint nn_campus_ovrrd_uniqueid not null,
				banner_campus_code varchar2(20) constraint nn_campus_ovrrd_code not null enable,
				banner_campus_name varchar2(100) constraint nn_campus_ovrrd_name not null enable,
				visible number(1,0) constraint nn_campus_ovrrd_visible not null enable)
		</plsql>
		<plsql>
			alter table %SCHEMA%.banner_campus_override add constraint pk_banner_campus_override_uid primary key (uniqueid)
		</plsql>
		<mysql>
			create table %SCHEMA%.banner_campus_override (
				uniqueid decimal(20,0) primary key not null,
				banner_campus_code varchar(20) not null,
				banner_campus_name varchar(100) not null,
				visible decimal(1,0) not null) engine = INNODB
		</mysql>
		<plsql>alter table %SCHEMA%.banner_section add banner_campus_override_id number(20,0)</plsql>
		<mysql>alter table %SCHEMA%.banner_section add banner_campus_override_id decimal(20,0)</mysql>
		<sql>
			alter table %SCHEMA%.banner_section add constraint fk_campus_override foreign key (banner_campus_override_id)
			references %SCHEMA%.banner_campus_override (uniqueid) on delete set null
		</sql>
 	</update>
 	<update version="5" date="12-Aug-2014" comment="Populate Class External UniqueIds with CRN">
 	    <plsql>
			update %SCHEMA%.class_ c
			set c.external_uid = substr(c.class_suffix, 0, instr(c.class_suffix, '-') - 1)
			where c.external_uid is null
			  and c.class_suffix like '%-%'
   	    </plsql>
   	    <mysql>
   	        update %SCHEMA%.class_ c
			set c.external_uid = substring_index(c.class_suffix, '-', 1)
			where c.external_uid is null
			  and c.class_suffix like '%-%' 
   	    </mysql>
 	</update>
 	<update version="6" date="12-Sep-2014" comment="Banner Queue In Status Index">
		<plsql>
			create index %SCHEMA%.idx_integrationqueuein_status on %SCHEMA%.integrationqueuein(uniqueId, status)
		</plsql>
		<mysql>
			create index idx_integrationqueuein_status on %SCHEMA%.integrationqueuein(uniqueId, status)
		</mysql>
 	</update>
 	<update version="7" date="3-Nov-2014" comment="CHAR">
 		<plsql>drop index %SCHEMA%.idx_banner_response_crn_xlst</plsql>
		<plsql>alter table %SCHEMA%.banner_campus_override modify banner_campus_code varchar2(20 char)</plsql>
		<plsql>alter table %SCHEMA%.banner_campus_override modify banner_campus_name varchar2(100 char)</plsql>
		<plsql>alter table %SCHEMA%.banner_crn_provider modify term_code varchar2(20 char)</plsql>
		<plsql>alter table %SCHEMA%.banner_cross_list_provider modify cross_list_identifier varchar2(2 char)</plsql>
		<plsql>alter table %SCHEMA%.banner_response modify term_code varchar2(6 char)</plsql>
		<plsql>alter table %SCHEMA%.banner_response modify crn varchar2(5 char)</plsql>
		<plsql>alter table %SCHEMA%.banner_response modify subj_code varchar2(4 char)</plsql>
		<plsql>alter table %SCHEMA%.banner_response modify crse_numb varchar2(5 char)</plsql>
		<plsql>alter table %SCHEMA%.banner_response modify seq_numb varchar2(3 char)</plsql>
		<plsql>alter table %SCHEMA%.banner_response modify xlst_group varchar2(2 char)</plsql>
		<plsql>alter table %SCHEMA%.banner_response modify external_id varchar2(50 char)</plsql>
		<plsql>alter table %SCHEMA%.banner_response modify action varchar2(50 char)</plsql>
		<plsql>alter table %SCHEMA%.banner_response modify type varchar2(50 char)</plsql>
		<plsql>alter table %SCHEMA%.banner_response modify message varchar2(4000 char)</plsql>
		<plsql>alter table %SCHEMA%.banner_response modify packet_id varchar2(500 char)</plsql>
		<plsql>alter table %SCHEMA%.banner_section modify section_index varchar2(10 char)</plsql>
		<plsql>alter table %SCHEMA%.banner_section modify cross_list_identifier varchar2(10 char)</plsql>
		<plsql>alter table %SCHEMA%.banner_section modify link_identifier varchar2(10 char)</plsql>
		<plsql>alter table %SCHEMA%.banner_section modify link_connector varchar2(10 char)</plsql>
		<plsql>alter table %SCHEMA%.banner_session modify banner_campus varchar2(20 char)</plsql>
		<plsql>alter table %SCHEMA%.banner_session modify banner_term_code varchar2(20 char)</plsql>
		<plsql>alter table %SCHEMA%.integrationqueueerror modify errortype varchar2(2 char)</plsql>
		<plsql>alter table %SCHEMA%.integrationqueueerror modify errortext varchar2(255 char)</plsql>
		<plsql>alter table %SCHEMA%.integrationqueuein modify status varchar2(10 char)</plsql>
		<plsql>alter table %SCHEMA%.integrationqueueout modify status varchar2(10 char)</plsql>
		<plsql>create index %SCHEMA%.idx_banner_response_crn_xlst on %SCHEMA%.banner_response (term_code||crn||xlst_group)</plsql>
	</update>
	<update version="8" date="19-Jan-2015" comment="Add Banner Section Lab Hours">
	 	<plsql>
	 		alter table %SCHEMA%.banner_config add lab_hours float
	 	</plsql>
		<mysql>
			alter table %SCHEMA%.banner_config add lab_hours double
		</mysql>
 	</update>
 	<update version="9" date="9-Oct-2019" comment="Future Banner Sessions Student Updates">
		<plsql>alter table %SCHEMA%.banner_session add future_id number(20,0)</plsql>
		<mysql>alter table %SCHEMA%.banner_session add future_id decimal(20,0)</mysql>
		<sql>
			alter table %SCHEMA%.banner_session add constraint fk_banner_session_future foreign key (future_id)
			references %SCHEMA%.banner_session (uniqueid) on delete set null
		</sql>
		<plsql>alter table %SCHEMA%.banner_session add future_mode number(10,0)</plsql>
		<mysql>alter table %SCHEMA%.banner_session add future_mode decimal(10,0)</mysql>
 	</update>
 	<update version="10" date="9-Oct-2019" comment="Banner Sessions Student Campus">
		<plsql>alter table %SCHEMA%.banner_session add student_campus varchar2(500 char)</plsql>
		<mysql>alter table %SCHEMA%.banner_session add student_campus varchar(500)</mysql>
 	</update>
 	 	<update version="11" date="21-Aug-2020" comment="Banner Session CRN Properties Changes">
 	    <plsql>alter table %SCHEMA%.banner_session add banner_term_crn_prop_id number(20)</plsql>
 	    <plsql>alter table %SCHEMA%.banner_session add use_subj_area_prfx_as_campus number(1)</plsql>
		<plsql>alter table %SCHEMA%.banner_session add subj_area_prfx_delim varchar2(5 char)</plsql>
		<mysql>alter table %SCHEMA%.banner_session add banner_term_crn_prop_id decimal(20,0)</mysql>
 	    <mysql>alter table %SCHEMA%.banner_session add use_subj_area_prfx_as_campus decimal(1,0)</mysql>
		<mysql>alter table %SCHEMA%.banner_session add subj_area_prfx_delim varchar(5)</mysql>
		<sql>
			alter table %SCHEMA%.banner_session add constraint fk_ban_trm_to_crn_prop foreign key (banner_term_crn_prop_id)
			references %SCHEMA%.banner_crn_provider (uniqueid) on delete set null
		</sql>
		<sql>
			update %SCHEMA%.banner_session
			set banner_session.banner_term_crn_prop_id = (select banner_crn_provider.uniqueid from %SCHEMA%.banner_crn_provider where banner_crn_provider.term_code = banner_session.banner_term_code)
		</sql>
		<plsql>
		<![CDATA[create or replace PACKAGE %SCHEMA%.crn_processor IS

  -- Author  : JRM
  -- Created : 4/22/2009 11:19:43 AM
  -- Purpose : Provide CRN for Banner sections

  -- banner_crn_provider table
  --   create table banner_crn_provider
  --   (
  --          term_code   varchar2(20) not null,
  --        last_crn    number(10) not null,
  --        search_flag char(1) not null,
  --        min_crn number(10) not null,
  --        max_crn number(10) not null
  --   );

  -- Public function and procedure declarations
  FUNCTION get_crn(sesn_id IN %SCHEMA%.banner_section.session_id%TYPE)
    RETURN %SCHEMA%.banner_section.crn%TYPE;

END crn_processor;]]></plsql>
<plsql><![CDATA[create or replace PACKAGE BODY %SCHEMA%.crn_processor IS

  FUNCTION get_max_crn(term_code IN %SCHEMA%.banner_session.banner_term_code%TYPE,
                       crn_min   IN %SCHEMA%.banner_crn_provider.min_crn%TYPE,
                       crn_max   IN %SCHEMA%.banner_crn_provider.max_crn%TYPE)
    RETURN %SCHEMA%.banner_section.crn%TYPE IS

    max_crn %SCHEMA%.banner_section.crn%TYPE;

  BEGIN

    BEGIN
      SELECT MAX(crn)
        INTO max_crn
        FROM %SCHEMA%.banner_section
       WHERE banner_section.session_id IN
             (SELECT session_id
                FROM %SCHEMA%.banner_session
               WHERE banner_term_code = term_code);
    EXCEPTION
      WHEN no_data_found THEN
        max_crn := crn_min;
    END;

    IF (max_crn > crn_max) THEN
      max_crn := crn_max;
    END IF;

    IF (max_crn < crn_min) THEN
      max_crn := crn_min;
    END IF;

    RETURN max_crn;

  END get_max_crn;

  FUNCTION get_min_crn(term_code IN %SCHEMA%.banner_session.banner_term_code%TYPE,
                       crn_min   IN %SCHEMA%.banner_crn_provider.min_crn%TYPE)
    RETURN %SCHEMA%.banner_section.crn%TYPE IS

    min_crn %SCHEMA%.banner_section.crn%TYPE;

  BEGIN

    BEGIN
      SELECT MIN(crn)
        INTO min_crn
        FROM %SCHEMA%.banner_section
       WHERE banner_section.session_id IN
             (SELECT session_id
                FROM %SCHEMA%.banner_session
               WHERE banner_term_code = term_code);
    EXCEPTION
      WHEN no_data_found THEN
        min_crn := crn_min;
    END;

    IF (min_crn < crn_min) THEN
      min_crn := crn_min;
    END IF;

    RETURN min_crn;

  END get_min_crn;

  FUNCTION get_next_unused_crn(term_code IN %SCHEMA%.banner_session.banner_term_code%TYPE,
                               start_crn IN %SCHEMA%.banner_section.crn%TYPE,
                               crn_min   IN %SCHEMA%.banner_crn_provider.min_crn%TYPE,
                               crn_max   IN %SCHEMA%.banner_crn_provider.max_crn%TYPE)
    RETURN %SCHEMA%.banner_section.crn%TYPE IS

    TYPE crn_type IS TABLE OF %SCHEMA%.banner_section.crn%TYPE;
    crn_table crn_type;

    next_crn %SCHEMA%.banner_section.crn%TYPE;

    restart_search BOOLEAN;
    answer         BOOLEAN;

  BEGIN
    next_crn       := start_crn + 1;
    restart_search := FALSE;

    SELECT banner_section.crn BULK COLLECT
      INTO crn_table
      FROM %SCHEMA%.banner_section
     WHERE banner_section.session_id IN
           (SELECT session_id
              FROM %SCHEMA%.banner_session
             WHERE banner_term_code = term_code);

    LOOP
      answer := next_crn NOT MEMBER OF crn_table;
      IF (answer IS NULL OR answer) THEN
        EXIT;
      ELSE
        next_crn := next_crn + 1;

        IF (next_crn > crn_max) THEN
          IF (restart_search) THEN
            raise_application_error(-20999,
                                    'No unused CRN is available (' ||
                                    term_code || ')');
          ELSE
            next_crn       := get_min_crn(term_code, crn_min);
            restart_search := TRUE;
          END IF;
        END IF;
      END IF;
    END LOOP;

    RETURN next_crn;

  END get_next_unused_crn;

  FUNCTION get_crn(sesn_id IN %SCHEMA%.banner_section.session_id%TYPE)
    RETURN %SCHEMA%.banner_section.crn%TYPE IS

    v_term_code %SCHEMA%.banner_session.banner_term_code%TYPE;
    v_crn_prov_id  %SCHEMA%.banner_crn_provider.uniqueid%TYPE;
    v_next_crn  %SCHEMA%.banner_crn_provider.last_crn%TYPE;
    v_min_crn   %SCHEMA%.banner_crn_provider.min_crn%TYPE;
    v_max_crn   %SCHEMA%.banner_crn_provider.max_crn%TYPE;
    v_search    %SCHEMA%.banner_crn_provider.search_flag%TYPE;
    v_new_crn_prov_id  %SCHEMA%.banner_crn_provider.uniqueid%TYPE;

  BEGIN

    v_term_code := section_processor.get_term_code(sesn_id);

    BEGIN
      SELECT banner_crn_provider.uniqueid,
             banner_crn_provider.last_crn,
             banner_crn_provider.min_crn,
             banner_crn_provider.max_crn,
             banner_crn_provider.search_flag
        INTO v_crn_prov_id,
	           v_next_crn,
             v_min_crn,
             v_max_crn,
             v_search
       FROM %SCHEMA%.banner_session
       INNER JOIN %SCHEMA%.banner_crn_provider on banner_crn_provider.uniqueid = banner_session.banner_term_crn_prop_id
       WHERE banner_session.session_id = sesn_id;
    EXCEPTION
      WHEN no_data_found THEN
        v_min_crn  := 10000;
        v_max_crn  := 69999;
        v_next_crn := get_max_crn(v_term_code, v_min_crn, v_max_crn);
    END;

    IF (v_search IS NOT NULL AND (v_search = 'Y' or v_search = '1')) THEN
      v_next_crn := get_next_unused_crn(v_term_code, v_next_crn, v_min_crn, v_max_crn);
    ELSE
      v_next_crn := v_next_crn + 1;
    END IF;

    IF (v_next_crn > v_max_crn) THEN
      v_next_crn := get_min_crn(v_term_code, v_min_crn);
      v_next_crn := get_next_unused_crn(v_term_code, v_next_crn, v_min_crn, v_max_crn);
      v_search   := '1';
    END IF;

    IF (v_crn_prov_id IS NULL) THEN
      BEGIN
	      SELECT pref_group_seq.nextval
	      INTO v_new_crn_prov_id
	      FROM dual;
      END;
      INSERT INTO %SCHEMA%.banner_crn_provider
      VALUES
        (v_new_crn_prov_id, v_term_code,
         v_next_crn,
         '1',
         v_min_crn,
         v_max_crn);
      UPDATE %SCHEMA%.banner_session
      SET banner_term_crn_prop_id = v_new_crn_prov_id
      WHERE session_id = sesn_id;
    ELSE
      UPDATE %SCHEMA%.banner_crn_provider
         SET last_crn    = v_next_crn,
             search_flag = v_search
      WHERE uniqueid = v_crn_prov_id;
    END IF;
    COMMIT;

    RETURN v_next_crn;

  END get_crn;

END crn_processor;]]>
</plsql>		
<mysql>DROP FUNCTION IF EXISTS %SCHEMA%.get_crn_provider_id</mysql>
<mysql>
CREATE FUNCTION %SCHEMA%.get_crn_provider_id(sesn_id DECIMAL(20, 0))
    RETURNS DECIMAL(20, 0)

  BEGIN
    declare crn_provider_id DECIMAL(20, 0);


    BEGIN
      SELECT banner_session.banner_term_crn_prop_id
        INTO crn_provider_id
        FROM %SCHEMA%.banner_session
       WHERE banner_session.session_id = sesn_id;
    END;

    RETURN crn_provider_id;

  END
</mysql>
<mysql>DROP PROCEDURE IF EXISTS %SCHEMA%.insert_crn_provider_rec</mysql>
<mysql>
  CREATE PROCEDURE %SCHEMA%.insert_crn_provider_rec(v_term_code VARCHAR(20),
         v_next_crn  BIGINT(10),
         v_min_crn   BIGINT(10),
         v_max_crn   BIGINT(10),
         v_sesn_id DECIMAL(20, 0)) 
   BEGIN
        DECLARE next_id DECIMAL(20,0);
      start transaction;
      select 32767 * next_hi
      into next_id 
      from %SCHEMA%.hibernate_unique_key;
      
      INSERT INTO %SCHEMA%.banner_crn_provider
      VALUES
        (next_id, v_term_code,
         v_next_crn,
         '1',
         v_min_crn,
         v_max_crn);
         
      update %SCHEMA%.banner_session
      set banner_term_crn_prop_id = next_id
      where session_id = v_sesn_id;
      
      update %SCHEMA%.hibernate_unique_key set next_hi = next_hi+1;
      commit;

  END
  </mysql>
<mysql>DROP PROCEDURE IF EXISTS %SCHEMA%.update_crn_provider_rec</mysql>
  <mysql>
  CREATE PROCEDURE %SCHEMA%.update_crn_provider_rec(v_banner_crn_provider_id DECIMAL(20, 0),
       v_next_crn  BIGINT(10),
       v_search    CHAR(1)) 

  BEGIN
        start transaction;
        UPDATE %SCHEMA%.banner_crn_provider
           SET last_crn    = v_next_crn,
               search_flag = v_search
        WHERE uniqueid = v_banner_crn_provider_id;
        COMMIT;
  END
  </mysql>
<mysql>DROP PROCEDURE IF EXISTS %SCHEMA%.get_crn</mysql>
<mysql>
CREATE PROCEDURE %SCHEMA%.get_crn(OUT out_crn BIGINT(10), IN sesn_id LONG)

BEGIN
    DECLARE v_term_code VARCHAR(20);
    DECLARE v_banner_crn_provider_id DECIMAL(20, 0);
    DECLARE v_next_crn  BIGINT(10);
    DECLARE v_min_crn   BIGINT(10);
    DECLARE v_max_crn   BIGINT(10);
    DECLARE v_search    CHAR(1);

    SET v_term_code = get_term_code(sesn_id);
    SET v_banner_crn_provider_id = get_crn_provider_id(sesn_id);

    BEGIN
      SELECT banner_crn_provider.last_crn,
             banner_crn_provider.min_crn,
             banner_crn_provider.max_crn,
             banner_crn_provider.search_flag
        INTO v_next_crn,
             v_min_crn,
             v_max_crn,
             v_search
        FROM %SCHEMA%.banner_crn_provider
       WHERE banner_crn_provider.uniqueid = v_banner_crn_provider_id;
    END;
    
    IF (v_min_crn IS NULL) THEN
        SET v_min_crn  = 10000;
        SET v_max_crn  = 69999;
        SET v_next_crn = get_max_crn(v_term_code,
                                v_min_crn,
                                v_max_crn);
    END IF;

    IF (v_search IS NULL OR v_search = 'Y' or v_search = '1') THEN
      SET v_next_crn = get_next_unused_crn(v_term_code,
                                      v_next_crn,
                                      v_min_crn,
                                      v_max_crn);
    ELSE
      SET v_next_crn = v_next_crn + 1;
    END IF;

    IF (v_next_crn > v_max_crn) THEN
      SET v_next_crn = get_min_crn(v_term_code,
                              v_min_crn);
      SET v_next_crn = get_next_unused_crn(v_term_code,
                                      v_next_crn,
                                      v_min_crn,
                                      v_max_crn);
      SET v_search   = '1';
    END IF;

    IF (v_banner_crn_provider_id IS NULL) THEN
	    call insert_crn_provider_rec(v_term_code,
	       v_next_crn,
	       v_min_crn,
	       v_max_crn,
         sesn_id); 
    ELSE
      call update_crn_provider_rec(v_banner_crn_provider_id, v_next_crn, v_search);
    END IF;
    set out_crn = v_next_crn;
  END 
  </mysql>
  	</update>
  	 	<update version="12" date="10-Oct-2020" comment="Banner Section Index and Link Id Support For Subject Area Prefixes">
		<plsql><![CDATA[
create or replace PACKAGE %SCHEMA%.section_processor IS

--Author : JRM
--Created : 5/12/2009 11:25:47 AM
--Purpose : Provide Section Number for Banner sections
--Check for existance of a Banner Section Number
--Provide Link Identifier for Banner sectons


--Public function and procedure declarations
  FUNCTION get_term_code(sesn_id IN %SCHEMA%.banner_session.session_id%TYPE)
    RETURN %SCHEMA%.banner_session.banner_term_code%TYPE;


  FUNCTION get_section(sesn_id IN %SCHEMA%.banner_section.session_id%TYPE,
                       subject IN %SCHEMA%.subject_area.subject_area_abbreviation%TYPE,
                       crs_nbr IN %SCHEMA%.course_offering.course_nbr%TYPE)
    RETURN %SCHEMA%.banner_section.section_index%TYPE;

  FUNCTION section_exists(sesn_id IN %SCHEMA%.banner_section.session_id%TYPE,
                          subject IN %SCHEMA%.subject_area.subject_area_abbreviation%TYPE,
                          crs_nbr IN %SCHEMA%.course_offering.course_nbr%TYPE,
                          section IN %SCHEMA%.banner_section.section_index%TYPE)
    RETURN BOOLEAN;

  FUNCTION get_link_identifier(sesn_id IN %SCHEMA%.banner_section.session_id%TYPE,
                               subject IN %SCHEMA%.subject_area.subject_area_abbreviation%TYPE,
                               crs_nbr IN %SCHEMA%.course_offering.course_nbr%TYPE)
    RETURN %SCHEMA%.banner_section.link_identifier%TYPE;

END section_processor;]]>
		</plsql>
		<plsql><![CDATA[
create or replace PACKAGE BODY %SCHEMA%.section_processor IS

  FUNCTION get_term_code(sesn_id IN %SCHEMA%.banner_session.session_id%TYPE)
    RETURN %SCHEMA%.banner_session.banner_term_code%TYPE IS

    term_code %SCHEMA%.banner_session.banner_term_code%TYPE;

  BEGIN
    BEGIN
      SELECT banner_term_code
        INTO term_code
        FROM %SCHEMA%.banner_session
       WHERE banner_session.session_id = sesn_id;

    EXCEPTION
      WHEN no_data_found THEN
        raise_application_error(-20999,
                                'Unknown session id (' || sesn_id || ')');
    END;
    RETURN term_code;
  END get_term_code;


  FUNCTION is_numeric(section IN %SCHEMA%.banner_section.section_index%TYPE)
    RETURN BOOLEAN IS

    RESULT BOOLEAN;

  BEGIN
    RESULT := FALSE;

    IF ((length(TRIM(translate(section, '0123456789',
                                        ' ')))) IS NULL) THEN
      RESULT := TRUE;
    END IF;
    RETURN RESULT;
  END is_numeric;


  FUNCTION set_next_999(section IN %SCHEMA%.banner_section.section_index%TYPE)
    RETURN %SCHEMA%.banner_section.section_index%TYPE IS

    sect %SCHEMA%.banner_section.section_index%TYPE;

  BEGIN

    IF (to_number(section, '099') = 998) THEN
      sect := NULL;
    ELSE
      sect := TRIM(to_char((to_number(section, '099') + 1), '099'));
    END IF;
    RETURN sect;
  END set_next_999;


  FUNCTION form_99a(section IN %SCHEMA%.banner_section.section_index%TYPE)
    RETURN BOOLEAN IS

    RESULT BOOLEAN;
    first_chars VARCHAR2(10);
    last_char INTEGER;

  BEGIN
    RESULT := FALSE;
    first_chars := substr(section, 1, 2);
    last_char := ascii(substr(section, 3, 1));

    IF (last_char >= 65 AND last_char <= 90 AND is_numeric(first_chars)) THEN
      RESULT := TRUE;
    END IF;
    RETURN RESULT;
  END form_99a;


  FUNCTION set_next_99a(section IN %SCHEMA%.banner_section.section_index%TYPE)
    RETURN %SCHEMA%.banner_section.section_index%TYPE IS

    num_val INTEGER;
    last_char INTEGER;
    sect %SCHEMA%.banner_section.section_index%TYPE;

  BEGIN
    num_val := to_number(substr(section, 1, 2), '99');
    last_char := ascii(substr(section, 3, 1)) + 1;

    IF (last_char > 90) THEN
      last_char := 65;
      num_val := num_val + 1;
    END IF;

    IF (num_val > 99) THEN
      sect := NULL;
    ELSE
      sect := TRIM(to_char(num_val, '09')) || TRIM(chr(last_char));
    END IF;
    RETURN sect;
  END set_next_99a;


  FUNCTION form_a99(section IN %SCHEMA%.banner_section.section_index%TYPE)
    RETURN BOOLEAN IS

    RESULT BOOLEAN;
    first_char INTEGER;
    last_chars VARCHAR2(10);

  BEGIN
    RESULT := FALSE;
    first_char := ascii(substr(section, 1, 1));
    last_chars := substr(section, 2);

    IF (first_char >= 65 AND first_char <= 90 AND is_numeric(last_chars)) THEN
      RESULT := TRUE;
    END IF;
    RETURN RESULT;
  END form_a99;


  FUNCTION set_next_a99(section IN %SCHEMA%.banner_section.section_index%TYPE)
    RETURN %SCHEMA%.banner_section.section_index%TYPE IS

    num_val INTEGER;
    first_char INTEGER;
    sect %SCHEMA%.banner_section.section_index%TYPE;

  BEGIN
    num_val := to_number(substr(section, 2), '99') + 1;
    first_char := ascii(substr(section, 1, 1));

    IF (num_val > 99) THEN
      num_val := 1;
      first_char := first_char + 1;
    END IF;

    IF (first_char > 90) THEN
      sect := NULL;
    ELSE
      sect := TRIM(chr(first_char)) ||
              TRIM(to_char(num_val, '09'));
    END IF;
    RETURN sect;
  END set_next_a99;

  FUNCTION find_section_nbr(sesn_id IN %SCHEMA%.banner_section.session_id%TYPE,
                            subject IN %SCHEMA%.subject_area.subject_area_abbreviation%TYPE,
                            crs_nbr IN %SCHEMA%.course_offering.course_nbr%TYPE)
    RETURN %SCHEMA%.banner_section.section_index%TYPE IS

    section_nbr %SCHEMA%.banner_section.section_index%TYPE;
    section_num INTEGER;

  BEGIN
    section_num := 1;
    LOOP
      section_nbr := TRIM(to_char(section_num, '099'));
      IF (NOT section_exists(sesn_id,
                             subject,
                             crs_nbr,
                             section_nbr)) THEN
        EXIT;
      END IF;

      section_num := section_num + 1;
      IF (section_num > 999) THEN
        raise_application_error(-20999,
                                'No section number is available (' ||
                                rtrim(subject) || rtrim(crs_nbr) || ')');
      END IF;
    END LOOP;
    RETURN section_nbr;
  END find_section_nbr;


  FUNCTION check_exists(sesn_id IN %SCHEMA%.banner_section.session_id%TYPE,
                        subject IN %SCHEMA%.subject_area.subject_area_abbreviation%TYPE,
                        crs_nbr IN %SCHEMA%.course_offering.course_nbr%TYPE,
                        section IN %SCHEMA%.banner_section.section_index%TYPE)
    RETURN %SCHEMA%.banner_section.section_index%TYPE IS

    section_nbr %SCHEMA%.banner_section.section_index%TYPE;

  BEGIN
    section_nbr := section;
    WHILE (section_exists(sesn_id,
                          subject,
                          crs_nbr,
                          section_nbr)) LOOP
      IF (is_numeric(section_nbr)) THEN
        section_nbr := set_next_999(section_nbr);
      ELSIF (form_a99(section_nbr)) THEN
        section_nbr := set_next_a99(section_nbr);
      ELSIF (form_99a(section_nbr)) THEN
        section_nbr := set_next_99a(section_nbr);
      ELSE
        section_nbr := find_section_nbr(sesn_id,
                                        subject,
                                        crs_nbr);
      END IF;

      IF (section_nbr IS NULL) THEN
         section_nbr := find_section_nbr(sesn_id,
                                         subject,
                                         crs_nbr);
      END IF;
    END LOOP;
    RETURN section_nbr;
  END check_exists;


  FUNCTION get_section(sesn_id IN %SCHEMA%.banner_section.session_id%TYPE,
                       subject IN %SCHEMA%.subject_area.subject_area_abbreviation%TYPE,
                       crs_nbr IN %SCHEMA%.course_offering.course_nbr%TYPE)
    RETURN %SCHEMA%.banner_section.section_index%TYPE IS

    section_nbr %SCHEMA%.banner_section.section_index%TYPE;
    term_code %SCHEMA%.banner_session.banner_term_code%TYPE;

  BEGIN
    term_code := get_term_code(sesn_id);
    BEGIN
      SELECT MAX(banner_section.section_index)
        INTO section_nbr
        FROM %SCHEMA%.banner_section,
             %SCHEMA%.banner_config,
             %SCHEMA%.banner_course,
             %SCHEMA%.course_offering,
             %SCHEMA%.subject_area,
             %SCHEMA%.banner_session
       WHERE banner_config.uniqueid = banner_section.banner_config_id
         AND banner_course.uniqueid = banner_config.banner_course_id
         AND course_offering.uniqueid = banner_course.course_offering_id
         AND subject_area.uniqueid = course_offering.subject_area_id
         AND rtrim(case 
    when banner_session.use_subj_area_prfx_as_campus is null then subject_area.subject_area_abbreviation
    when banner_session.use_subj_area_prfx_as_campus = 0 then subject_area.subject_area_abbreviation
    when banner_session.use_subj_area_prfx_as_campus = 1 and banner_session.subj_area_prfx_delim is null then substr(subject_area.subject_area_abbreviation, instr(subject_area.subject_area_abbreviation, ' - ') + 3) 
    else substr(subject_area.subject_area_abbreviation, instr(subject_area.subject_area_abbreviation, banner_session.subj_area_prfx_delim) + length(banner_session.subj_area_prfx_delim)) 
    end
         ) = rtrim(subject)
         AND (length(TRIM(translate(banner_section.section_index, '0123456789',
                                                                  ' ')))) IS NULL

         AND rtrim(substr(course_offering.course_nbr, 1, 5)) = rtrim(substr(crs_nbr, 1, 5))
         AND banner_session.session_id = banner_section.session_id 
         AND banner_session.banner_term_code = rtrim(term_code);
    EXCEPTION
      WHEN no_data_found THEN
        section_nbr := '000';
    END;

    IF (section_nbr IS NULL) THEN
      section_nbr := '000';
    END IF;

    IF (is_numeric(section_nbr)) THEN
      section_nbr := set_next_999(section_nbr);
    ELSIF (form_a99(section_nbr)) THEN
      section_nbr := set_next_a99(section_nbr);
    ELSIF (form_99a(section_nbr)) THEN
      section_nbr := set_next_99a(section_nbr);
    ELSE
      section_nbr := find_section_nbr(sesn_id,
                                      subject,
                                      crs_nbr);
    END IF;

    IF (section_nbr IS NULL) THEN
      section_nbr := find_section_nbr(sesn_id,
                                      subject,
                                      crs_nbr);
    END IF;

    section_nbr := check_exists(sesn_id,
                                subject,
                                crs_nbr,
                                section_nbr);
    RETURN section_nbr;
  END get_section;


  FUNCTION section_exists(sesn_id IN %SCHEMA%.banner_section.session_id%TYPE,
                          subject IN %SCHEMA%.subject_area.subject_area_abbreviation%TYPE,
                          crs_nbr IN %SCHEMA%.course_offering.course_nbr%TYPE,
                          section IN %SCHEMA%.banner_section.section_index%TYPE)
    RETURN BOOLEAN IS

    sect_exists BOOLEAN;
    term_code %SCHEMA%.banner_session.banner_term_code%TYPE;
    rec INTEGER;

  BEGIN
    sect_exists := FALSE;
    term_code := get_term_code(sesn_id);
    SELECT COUNT(*)
      INTO rec
      FROM %SCHEMA%.banner_section,
           %SCHEMA%.banner_config,
           %SCHEMA%.banner_course,
           %SCHEMA%.course_offering,
           %SCHEMA%.subject_area,
             %SCHEMA%.banner_session
     WHERE banner_config.uniqueid = banner_section.banner_config_id
       AND banner_course.uniqueid = banner_config.banner_course_id
       AND course_offering.uniqueid = banner_course.course_offering_id
       AND subject_area.uniqueid = course_offering.subject_area_id
       AND rtrim(case 
    when banner_session.use_subj_area_prfx_as_campus is null then subject_area.subject_area_abbreviation
    when banner_session.use_subj_area_prfx_as_campus = 0 then subject_area.subject_area_abbreviation
    when banner_session.use_subj_area_prfx_as_campus = 1 and banner_session.subj_area_prfx_delim is null then substr(subject_area.subject_area_abbreviation, instr(subject_area.subject_area_abbreviation, ' - ') + 3) 
    else substr(subject_area.subject_area_abbreviation, instr(subject_area.subject_area_abbreviation, banner_session.subj_area_prfx_delim) + length(banner_session.subj_area_prfx_delim)) 
    end) = rtrim(subject)
       AND rtrim(substr(course_offering.course_nbr, 1, 5)) = rtrim(substr(crs_nbr, 1, 5))
       AND rtrim(banner_section.section_index) = rtrim(section)
       AND banner_session.session_id = banner_section.session_id 
         AND banner_session.banner_term_code = rtrim(term_code);
    IF (rec > 0) THEN
      sect_exists := TRUE;
    END IF;
    RETURN sect_exists;
  END section_exists;


  FUNCTION get_link_identifier(sesn_id IN %SCHEMA%.banner_section.session_id%TYPE,
                               subject IN %SCHEMA%.subject_area.subject_area_abbreviation%TYPE,
                               crs_nbr IN %SCHEMA%.course_offering.course_nbr%TYPE)
    RETURN %SCHEMA%.banner_section.link_identifier%TYPE IS

    link_id %SCHEMA%.banner_section.link_identifier%TYPE;
    term_code %SCHEMA%.banner_session.banner_term_code%TYPE;

    CURSOR l_id IS
      SELECT cross_list_identifier
        FROM %SCHEMA%.banner_cross_list_provider
      MINUS
      SELECT banner_section.link_identifier
        FROM %SCHEMA%.banner_section,
             %SCHEMA%.banner_config,
             %SCHEMA%.banner_course,
             %SCHEMA%.course_offering,
             %SCHEMA%.subject_area,
             %SCHEMA%.banner_session
       WHERE banner_config.uniqueid = banner_section.banner_config_id
         AND banner_course.uniqueid = banner_config.banner_course_id
         AND course_offering.uniqueid = banner_course.course_offering_id
         AND subject_area.uniqueid = course_offering.subject_area_id
         AND rtrim(case 
    when banner_session.use_subj_area_prfx_as_campus is null then subject_area.subject_area_abbreviation
    when banner_session.use_subj_area_prfx_as_campus = 0 then subject_area.subject_area_abbreviation
    when banner_session.use_subj_area_prfx_as_campus = 1 and banner_session.subj_area_prfx_delim is null then substr(subject_area.subject_area_abbreviation, instr(subject_area.subject_area_abbreviation, ' - ') + 3) 
    else substr(subject_area.subject_area_abbreviation, instr(subject_area.subject_area_abbreviation, banner_session.subj_area_prfx_delim) + length(banner_session.subj_area_prfx_delim)) 
    end) = rtrim(subject)
         AND rtrim(substr(course_offering.course_nbr, 1, 5)) = rtrim(substr(crs_nbr, 1, 5))
         AND banner_session.session_id = banner_section.session_id 
         AND banner_session.banner_term_code = rtrim(term_code)
         AND banner_section.session_id IN (SELECT banner_session.session_id
                                             FROM %SCHEMA%.banner_session
                                            WHERE banner_session.banner_term_code = rtrim(term_code))
                                           MINUS
                                           SELECT cross_list_identifier
                                             FROM %SCHEMA%.banner_cross_list_provider
                                            WHERE ascii(substr(cross_list_identifier, 1, 1)) BETWEEN 48 AND 57
                                               OR ascii(substr(cross_list_identifier, 2, 1)) = 48;

  BEGIN
    term_code := get_term_code(sesn_id);
    link_id := NULL;

    OPEN l_id;
      FETCH l_id
       INTO link_id;

      IF (link_id IS NULL) THEN
        raise_application_error(-20999,
                                'No unused link identifier is available (' ||
                                rtrim(subject) || rtrim(crs_nbr) || ')');
      END IF;
    CLOSE l_id;
    RETURN link_id;
  END get_link_identifier;
END section_processor;		]]>
	</plsql>
	<plsql>ALTER PACKAGE %SCHEMA%.cross_list_processor COMPILE BODY</plsql>
		<mysql>
			DROP FUNCTION IF EXISTS %SCHEMA%.get_section
		</mysql>
		<mysql>
			CREATE FUNCTION %SCHEMA%.get_section(sesn_id DECIMAL(20,0),
                            subject VARCHAR(10),
                            crs_nbr VARCHAR(10))
    RETURNS VARCHAR(10)
    
  BEGIN
    DECLARE section_nbr VARCHAR(10);
    DECLARE term_code VARCHAR(20);

    set term_code = get_term_code(sesn_id);

    BEGIN
      SELECT MAX(banner_section.section_index)
        INTO section_nbr
        FROM %SCHEMA%.banner_section,
             %SCHEMA%.banner_config,
             %SCHEMA%.banner_course,
             %SCHEMA%.course_offering,
             %SCHEMA%.subject_area,
             %SCHEMA%.banner_session
       WHERE banner_config.uniqueid = banner_section.banner_config_id
         AND banner_course.uniqueid = banner_config.banner_course_id
         AND course_offering.uniqueid = banner_course.course_offering_id
         AND subject_area.uniqueid = course_offering.subject_area_id
         AND rtrim(case 
    when banner_session.use_subj_area_prfx_as_campus is null then subject_area.subject_area_abbreviation
    when banner_session.use_subj_area_prfx_as_campus = 0 then subject_area.subject_area_abbreviation
    when banner_session.use_subj_area_prfx_as_campus = 1 and banner_session.subj_area_prfx_delim is null then substring_index(subject_area.subject_area_abbreviation, ' - ', -1) 
    when banner_session.use_subj_area_prfx_as_campus = 1 and banner_session.subj_area_prfx_delim = '' then substring_index(subject_area.subject_area_abbreviation, ' - ', -1) 
    else substring_index(subject_area.subject_area_abbreviation, banner_session.subj_area_prfx_delim, -1) 
    end) = rtrim(subject)
         AND is_numeric(banner_section.section_index)
         AND rtrim(substr(course_offering.course_nbr,
                          1,
                          5)) = rtrim(substr(crs_nbr,
                                             1,
                                             5))
         AND banner_session.session_id = banner_section.session_id 
         AND banner_session.banner_term_code = rtrim(term_code);
    END;

    IF (section_nbr IS NULL) THEN
      set section_nbr = '000';
    END IF;

    IF (is_numeric(section_nbr)) THEN
      set section_nbr = set_next_999(section_nbr);
    ELSEIF (form_a99(section_nbr)) THEN
      set section_nbr = set_next_a99(section_nbr);
    ELSEIF (form_99a(section_nbr)) THEN
      set section_nbr = set_next_99a(section_nbr);
    ELSE
      set section_nbr = find_section_nbr(sesn_id,
                                      subject,
                                      crs_nbr);
    END IF;

    IF (section_nbr IS NULL) THEN
      set section_nbr = find_section_nbr(sesn_id,
                                      subject,
                                      crs_nbr);
    END IF;

    set section_nbr = check_exists(sesn_id,
                                subject,
                                crs_nbr,
                                section_nbr);

    RETURN section_nbr;

  END
		</mysql>
		<mysql>
		DROP FUNCTION IF EXISTS %SCHEMA%.section_exists
		</mysql>		
		<mysql>
		CREATE FUNCTION %SCHEMA%.section_exists(sesn_id DECIMAL(20,0),
                          subject VARCHAR(10),
                          crs_nbr VARCHAR(10),
                          section VARCHAR(10))
    RETURNS BOOLEAN

  BEGIN
    DECLARE sect_exists BOOLEAN;
    DECLARE term_code VARCHAR(20);
    DECLARE rec       DECIMAL(10);

    set sect_exists = FALSE;
    set term_code = get_term_code(sesn_id);

    SELECT COUNT(*)
      INTO rec
      FROM %SCHEMA%.banner_section,
           %SCHEMA%.banner_config,
           %SCHEMA%.banner_course,
           %SCHEMA%.course_offering,
           %SCHEMA%.subject_area,
           %SCHEMA%.banner_session
     WHERE banner_config.uniqueid = banner_section.banner_config_id
       AND banner_course.uniqueid = banner_config.banner_course_id
       AND course_offering.uniqueid = banner_course.course_offering_id
       AND subject_area.uniqueid = course_offering.subject_area_id
       AND rtrim(case 
    when banner_session.use_subj_area_prfx_as_campus is null then subject_area.subject_area_abbreviation
    when banner_session.use_subj_area_prfx_as_campus = 0 then subject_area.subject_area_abbreviation
    when banner_session.use_subj_area_prfx_as_campus = 1 and banner_session.subj_area_prfx_delim is null then substring_index(subject_area.subject_area_abbreviation, ' - ', -1) 
    when banner_session.use_subj_area_prfx_as_campus = 1 and banner_session.subj_area_prfx_delim = '' then substring_index(subject_area.subject_area_abbreviation, ' - ', -1) 
    else substring_index(subject_area.subject_area_abbreviation, banner_session.subj_area_prfx_delim, -1) 
    end) = rtrim(subject)
       AND rtrim(substr(course_offering.course_nbr,
                        1,
                        5)) = rtrim(substr(crs_nbr,
                                           1,
                                           5))
       AND rtrim(banner_section.section_index) = rtrim(section)
       AND banner_session.session_id = banner_section.session_id 
       AND banner_session.banner_term_code = rtrim(term_code);
       
    IF (rec > 0) THEN
      set sect_exists = TRUE;
    END IF;

    RETURN sect_exists;

  END
		</mysql>
		<mysql>
		DROP FUNCTION IF EXISTS %SCHEMA%.get_link_identifier
		</mysql>
		<mysql>
		CREATE FUNCTION %SCHEMA%.get_link_identifier(sesn_id DECIMAL(20,0),
                          subject VARCHAR(10),
                          crs_nbr VARCHAR(10))
    RETURNS VARCHAR(10)

  BEGIN

    DECLARE link_id VARCHAR(10);
    DECLARE term_code VARCHAR(20);
    DECLARE l_id CURSOR FOR
       SELECT cross_list_identifier
        FROM %SCHEMA%.banner_cross_list_provider
      where cross_list_identifier regexp '^[A-Z][A-Z1-9]$'
        and cross_list_identifier not in (
      SELECT banner_section.link_identifier
        FROM %SCHEMA%.banner_section,
             %SCHEMA%.banner_config,
             %SCHEMA%.banner_course,
             %SCHEMA%.course_offering,
             %SCHEMA%.subject_area,
             %SCHEMA%.banner_session
       WHERE banner_config.uniqueid = banner_section.banner_config_id
         AND banner_course.uniqueid = banner_config.banner_course_id
         AND banner_section.link_identifier = banner_cross_list_provider.cross_list_identifier
         AND course_offering.uniqueid = banner_course.course_offering_id
         AND subject_area.uniqueid = course_offering.subject_area_id
         AND rtrim(case 
    when banner_session.use_subj_area_prfx_as_campus is null then subject_area.subject_area_abbreviation
    when banner_session.use_subj_area_prfx_as_campus = 0 then subject_area.subject_area_abbreviation
    when banner_session.use_subj_area_prfx_as_campus = 1 and banner_session.subj_area_prfx_delim is null then substring_index(subject_area.subject_area_abbreviation, ' - ', -1) 
    when banner_session.use_subj_area_prfx_as_campus = 1 and banner_session.subj_area_prfx_delim = '' then substring_index(subject_area.subject_area_abbreviation, ' - ', -1) 
   else substring_index(subject_area.subject_area_abbreviation, banner_session.subj_area_prfx_delim, -1) 
    end) = rtrim(subject)
         AND rtrim(substr(course_offering.course_nbr,
                          1,
                          5)) = rtrim(substr(crs_nbr,
                                             1,
                                             5))
       AND banner_session.session_id = banner_section.session_id 
       AND banner_session.banner_term_code = rtrim(term_code))
    order by cross_list_identifier;
 
    set term_code = get_term_code(sesn_id);
    set link_id = NULL;

    OPEN l_id;

    FETCH l_id
      INTO link_id;
    CLOSE l_id;

    RETURN link_id;

  END
		</mysql>
	</update>
	<update version="13" date="13-Oct-2020" comment="Cohort Restrictions for Instructional Methods">
		<plsql>
			create table %SCHEMA%.banner_inst_method_cohort_rstrct (
				uniqueid number(20,0) constraint nn_bimcr_uid not null,
				session_id number(20,0) constraint nn_bimcr_sess_id not null,
				instr_method_id number(20,0) constraint nn_bimcr_instr_method_id not null,
				cohort_id number(20,0) constraint nn_bimcr_cohort_id not null,
				restriction_action varchar2(1 char) not null,
				removed number(1,0) not null
			)
		</plsql>
		<plsql>alter table %SCHEMA%.banner_inst_method_cohort_rstrct add constraint pk_bimcr primary key (uniqueid)</plsql>
		<plsql>create unique index %SCHEMA%.uk_bimcr_sess_method_cohort on %SCHEMA%.banner_inst_method_cohort_rstrct(session_id, instr_method_id, cohort_id)</plsql>
		<mysql>
			create table %SCHEMA%.banner_inst_method_cohort_rstrct (
				uniqueid decimal(20,0) primary key not null,
				session_id decimal(20,0) not null,
				instr_method_id decimal(20,0) not null,
				cohort_id decimal(20,0) not null,
				restriction_action varchar(1) not null,
				removed decimal(1,0) not null
			)
		</mysql>
		<mysql>create unique index uk_bimcr_sess_method_cohort on %SCHEMA%.banner_inst_method_cohort_rstrct(session_id, instr_method_id, cohort_id)</mysql>
		<sql>
			alter table %SCHEMA%.banner_inst_method_cohort_rstrct 
				add constraint fk_bimcr_session_id foreign key (session_id)
				references %SCHEMA%.sessions (uniqueid) on delete cascade
		</sql>
		<sql>
			alter table %SCHEMA%.banner_inst_method_cohort_rstrct 
				add constraint fk_bimcr_instr_method_id foreign key (instr_method_id)
				references %SCHEMA%.instructional_method (uniqueid) on delete cascade
		</sql>
		<sql>
			alter table %SCHEMA%.banner_inst_method_cohort_rstrct 
				add constraint fk_bimcr_cohort_id foreign key (cohort_id)
				references %SCHEMA%.student_group (uniqueid) on delete cascade
		</sql>
		<plsql>
			create table %SCHEMA%.banner_last_sent_sect_restr (
				uniqueid number(20,0) constraint nn_blssr_uid not null,
				restriction_type number(10,0) not null,
				banner_section_id number(20,0) constraint nn_blssr_banner_sec_id not null,
				restriction_action varchar2(1 char) not null,
				removed number(1,0) not null,
				cohort_id number(20,0) constraint nn_blssr_cohort not null
			)
		</plsql>
		<plsql>alter table %SCHEMA%.banner_last_sent_sect_restr add constraint pk_blssr primary key (uniqueid)</plsql>
		<plsql>create unique index %SCHEMA%.uk_blssr_ban_sec_rest_type_cohrt on %SCHEMA%.banner_last_sent_sect_restr(banner_section_id, restriction_type, cohort_id)</plsql>
		<mysql>
			create table %SCHEMA%.banner_last_sent_sect_restr (
				uniqueid decimal(20,0) primary key not null,
				restriction_type decimal(10,0) not null,
				banner_section_id decimal(20,0) not null,
				restriction_action varchar(1) not null,
				removed decimal(1,0) not null,
				cohort_id decimal(20,0) not null
			)
		</mysql>
		<mysql>create unique index uk_blssr_ban_sec_rest_type_cohrt on %SCHEMA%.banner_last_sent_sect_restr(banner_section_id, restriction_type, cohort_id)</mysql>
		<sql>
			alter table %SCHEMA%.banner_last_sent_sect_restr 
				add constraint fk_blssr_banner_sec_id foreign key (banner_section_id)
				references %SCHEMA%.banner_section (uniqueid) on delete cascade
		</sql>
		<sql>
			alter table %SCHEMA%.banner_last_sent_sect_restr 
				add constraint fk_blssr_cohort_id foreign key (cohort_id)
				references %SCHEMA%.student_group (uniqueid) on delete cascade
		</sql>
	</update>
 </dbupdate>